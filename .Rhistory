nome = 'Icaro M. Miranda'
class(nome)
paste("Meu nome Ã© ", nome)
?pastr
?paste
variavel <- 5
variavel
variavel = 10
class(variavel)
variavel/0
variavel = 10L
class(variavel)
valores = -10:10
valores
class(valores)
as.numeric(valores)
class(valores)
as.complex(valores)
valores > 5
maiorQue5 = valores[valores > 5]
maiorQue5
q()
x = 1,2,3,4,5,6,7,8,9,10
x = 1:10
y = x**2
plot(x,y)
x = t
y = t**3
y = x**3
q()
x <- [:10]
x = [1,2,3,4]
x = 2
plot(t,t**@)
plot(t,t**2)
x = 1:10
y = x**2
plot(x,y)
integrate(t, 1, 100)
read.csv("df.csv")
df <- read.csv("~/Documentos/df.csv", header=FALSE)
View(df)
remove(df)
df <- read.csv("~/Documentos/df.csv", header=FALSE)
View(df)
p1=df[[1]]
p2=df[[2]]
p3=df[[3]]
p4=df[[3]]
p4=df[[4]]
p4=df[[5]]
p4=df[[4]]
p5=df[[5]]
p6=df[[6]]
p7=df[[7]]
p8=df[[8]]
p9=df[[9]]
p1=unique(p1)
p6=unique(p6)
Fluconazol <- read.csv("~/Downloads/c4.5/R8/Src/Fluconazol.data", header=FALSE)
View(Fluconazol)
f = Fluconazol
p1 = [[1]]
p1 = f[[1]]
p1 = unique(p1)
p1 = sort(p1)
p2 = f[[2]]
p3 = f[[3]]
p4 = f[[4]]
p5 = f[[5]]
p6 = f[[6]]
p7 = f[[7]]
p8 = f[[8]]
p9 = f[[9]]
p10 = f[[10]]
p11 = f[[11]]
p12 = f[[12]]
p13 = f[[13]]
p1
p6=unique(p6)
sort(p3)
p5=unique(p5)
sort(p5)
levels(p7)
p7=unique(p7)
p7=sort(p7)
p7
p8=unique(p8)
p8
p9=unique(p9)
p9
base_estrangeiros <- read.csv("~/\x01rea de Trabalho/Unb/Semestre 05/Estudos em Sistemas de Informa\x07\x03o/info/Novas bases/base_estrangeiros.csv", header=FALSE, sep=";")
View(base_estrangeiros)
base_estrangeiros <- read.csv("~/\x01rea de Trabalho/Unb/Semestre 05/Estudos em Sistemas de Informa\x07\x03o/info/Novas bases/base_estrangeiros.csv", header=FALSE, sep=";")
View(base_estrangeiros)
q()
install.packages("h2o")
library("h2o")
a = h2o.init()
install.packages(ploty)
install.packages("plot3D")
install.packages("ploty")
install.packages("rSymPy")
install.packages("rJava")
install.packages("rJython")
install.packages("rjson")
install.packages("rJava")
install.packages("rJava")
install.packages("rJython")
install.packages("rjson")
install.packages("rSymPy")
library(rSymPy)
x<-Var("x")
x
sympy("integrate(x)")
x<-Var("y")
sympy("integrate(x*y)")
sympy("integrate(x*y, x)")
sympy("integrate(x*y)")
sympy("derivate(x*y)")
sympy("deriv(x*y)")
sympy("diff(x*y)")
sympy("diff(x*y, "x)")
sympy("diff(x*y, x)")
sympy("divergence(x*y, x)")
sympy("div(x*y)")
sympy("grad(x*y)")
help("sympy")
setwd("~/")
setwd("~/Dropbox/PIBIC_2-17/IC_2-17/DL")
setwd("~/Dropbox/PIBIC_2-17/IC_2-17")
evolution <- function(name, rang, iter, type_file, cl){
aux <- matrix(nrow = iter, ncol = length(rang))
est <- c(rep(0,each=iter))
desvpos <- c(rep(0,each=iter))
desvneg <- c(rep(0,each=iter))
desvmax <- c(rep(0,each=iter))
desvmin <- c(rep(0,each=iter))
for (i in 1:length(rang)){
a <- read.csv(paste(name, as.character(rang[i]), type_file, sep= ""), header = FALSE, quote = "")
for (j in 1:iter){
est[j] <- est[j] + as.numeric(a[j,cl]/length(rang))
aux[j,i] <- as.numeric(a[j,cl])
}
}
for (j in 1:iter){
desvpos[j] <- sqrt(var(aux[j,]))
desvneg[j] <- sqrt(var(aux[j,]))
desvmax[j] <- max(aux[j,])
desvmin[j] <- min(aux[j,])
}
return(list(custos = est, desvneg = est - desvneg, desvpos = desvpos + est, desvmax = desvmax, desvmin = desvmin))
}
par(mfrow = c(2,2))
# Plot Q-Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,400), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg)), col = "grey")
lines(1:400, q$custos, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,25), main = "Model Training\nDeep Learning", xlab = "Epochs", ylab = "Reward")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",2)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(0,200), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training reward
temp <- c(0,1,2,7,8,9,14,15,16,21,22,23,28,29,30,35,36,37,42,43)
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,300), main = "Model Training\nGenetic Programming", xlab = "Generations", ylab = "Reward")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",2)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q
plot.new()
legend("center", legend=c("Best model","Average Model", "Worst Model", "Satndard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =2)
# Plot Q-Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,400), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg)), col = "grey")
lines(1:400, q$custos, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,25), main = "Model Training\nDeep Learning", xlab = "Epochs", ylab = "Reward")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",2)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(0,200), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training reward
temp <- c(0,1,2,7,8,9,14,15,16,21,22,23,28,29,30,35,36,37,42,43)
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,300), main = "Model Training\nGenetic Programming", xlab = "Generations", ylab = "Reward")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",2)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q
plot.new()
legend("center", legend=c("Best model","Average Model", "Worst Model", "Standard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =1.5)
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,400), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg)), col = "grey")
spline(1:400, q$custos, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
spline(1:400, q$desvmax, col = "blue", pch = 2, lty = 6)
spline(1:400, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
smooth(1:50)
smooth.spline(1:50, 50:100)
smooth.spline(1:50, 50:99)
plot(smooth.spline(1:50, 50:99))
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,400), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg)), col = "grey")
smooth.spline(1:400, q$custos, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
smooth.spline(1:400, q$desvmax, col = "blue", pch = 2, lty = 6)
smooth.spline(1:400, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
plot(0,0,type = "l", ylim = c(40,140), xlim = c(1,300), main = "Model Time Training\nGenetic Programming", xlab = "Generations", ylab = "Time (s)")
# Plot Q-Learning Model Tranining time
plot(0,0,type = "l", ylim = c(0,6), xlim = c(1,400), main = "Model Time Training\nQ-Learning", xlab = "Episodes", ylab = "Time (ms)")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 3)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg))*1000, col = "grey")
lines(1:400, q$custos*1000, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax*1000, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin*1000, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining time
plot(0,0,type = "l", ylim = c(2,5), xlim = c(1,25), main = "Model Time Training\nDeep Learning", xlab = "Epochs", ylab = "Time (s)")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",3)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(2,5), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training Time
temp <- c(0,1,2,7,8,9,14,15,16,21,22,23,28,29,30,35,36,37,42,43)
plot(0,0,type = "l", ylim = c(40,140), xlim = c(1,300), main = "Model Time Training\nGenetic Programming", xlab = "Generations", ylab = "Time (s)")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
legend("center", legend=c("Best model","Average Model", "Worst Model", "Standard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =1.5)
# Plot Q-Learning Model Tranining time
plot(0,0,type = "l", ylim = c(0,6), xlim = c(1,400), main = "Model Time Training\nQ-Learning", xlab = "Episodes", ylab = "Time (ms)")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 3)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg))*1000, col = "grey")
lines(1:400, q$custos*1000, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax*1000, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin*1000, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining time
plot(0,0,type = "l", ylim = c(2,5), xlim = c(1,25), main = "Model Time Training\nDeep Learning", xlab = "Epochs", ylab = "Time (s)")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",3)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(2,5), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training Time
temp <- c(0,1,2,7,8,9,14,15,16,21,22,23,28,29,30,35,36,37,42,43)
plot(0,0,type = "l", ylim = c(40,140), xlim = c(1,300), main = "Model Time Training\nGenetic Programming", xlab = "Generations", ylab = "Time (s)")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q-Learning Model Tranining time
plot(0,0,type = "l", ylim = c(0,6), xlim = c(1,400), main = "Model Time Training\nQ-Learning", xlab = "Episodes", ylab = "Time (ms)")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 3)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg))*1000, col = "grey")
lines(1:400, q$custos*1000, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax*1000, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin*1000, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining time
plot(0,0,type = "l", ylim = c(2,5), xlim = c(1,25), main = "Model Time Training\nDeep Learning", xlab = "Epochs", ylab = "Time (s)")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",3)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(2,5), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training Time
temp <- c(0,1,2,7,8,9,14,15,16,21,22,23,28,29,30,35,36,37,42,43)
plot(0,0,type = "l", ylim = c(40,140), xlim = c(1,300), main = "Model Time Training\nGenetic Programming", xlab = "Generations", ylab = "Time (s)")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q-Learning Model Tranining time
plot(0,0,type = "l", ylim = c(0,6), xlim = c(1,400), main = "Model Time Training\nQ-Learning", xlab = "Episodes", ylab = "Time (ms)")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 3)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg))*1000, col = "grey")
lines(1:400, q$custos*1000, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax*1000, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin*1000, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining time
plot(0,0,type = "l", ylim = c(2,5), xlim = c(1,25), main = "Model Time Training\nDeep Learning", xlab = "Epochs", ylab = "Time (s)")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",3)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(2,5), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training Time
temp <- c(0,1,2,7,8,9,14,15,16,21,22,23,28,29,30,35,36,37,42,43)
plot(0,0,type = "l", ylim = c(40,140), xlim = c(1,300), main = "Model Time Training\nGenetic Programming", xlab = "Generations", ylab = "Time (s)")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q-Learning Model Tranining time
plot(0,0,type = "l", ylim = c(0,6), xlim = c(1,400), main = "Model Time Training\nQ-Learning", xlab = "Episodes", ylab = "Time (ms)")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 3)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg))*1000, col = "grey")
lines(1:400, q$custos*1000, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax*1000, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin*1000, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining time
plot(0,0,type = "l", ylim = c(2,5), xlim = c(1,25), main = "Model Time Training\nDeep Learning", xlab = "Epochs", ylab = "Time (s)")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",3)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(2,5), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training Time
temp <- c(0,1,2,7,8,9,14,15,16,21,22,23,28,29,30,35,36,37,42,43)
plot(0,0,type = "l", ylim = c(40,140), xlim = c(1,300), main = "Model Time Training\nGenetic Programming", xlab = "Generations", ylab = "Time (s)")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
plot.new()
legend("center", legend=c("Best model","Average Model", "Worst Model", "Standard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =1.5)
