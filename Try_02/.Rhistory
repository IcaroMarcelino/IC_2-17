load("~/Base_de_Dados.csv")
db = read.table("Base_de_Dados.csv", sep = "", quote = "")
db = read.table("Base_de_Dados.csv", sep = ";", quote = "")
View(db)
db = read.table("Base_de_Dados.csv", sep = ";", quote = "", col.names = TRUE)
db = read.table("Base_de_Dados.csv", sep = ";", quote = "", col.names = TRUE)
bd[-1,]
db <- db[-1,]
levels(bd[,5])
levels(db[,5])
View(db)
View(db)
levels(db[,5])
lvl <- levels(db[,5])
lvl <- lvl[-4]
lvl
length(which(db[,5] == lvl[1]))
lvl[1,2] <- length(which(db[,5] == lvl[1]))
as.matrix(lvl)
as.matrix(lvl[1,2]) <- length(which(db[,5] == lvl[1]))
lvl <- as.matrix(lvl)
lvl[1,2] <- length(which(db[,5] == lvl[1]))
ncol(lvl)
m[1,1]<-lvl[1]
m <- matrix(nrow = 10, ncol = 2)
m[1,1]<-lvl[1]
m[1,2]<- length(which(db[,5] == lvl[1]))
View(m)
for(i = 1:10){}
for(i in 1:10){
}
for(i in 1:10){
m[i,1]<-lvl[i]
m[i,2]<- length(which(db[,5] == lvl[i]))
}
m
write.csv(m, sep = ";", quote = "", col.names = FALSE, row.names = FALSE)
write.table(m, sep = ";", quote = "", col.names = FALSE, row.names = FALSE, file = "Agentes.csv")
write.table(m, sep = ";", col.names = FALSE, row.names = FALSE, file = "Agentes.csv")
View(db)
levels(db[,8])
db1 = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "", col.names = FALSE)
db1 = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "")
View(db1)
db1<-db1[-1,]
View(db1)
lvl1 <- levels(db1[,10])
m1 <- matrix(nrow = 29, ncol = 2)
for(i in 1:29){
m1[i,1]<-lvl1[i]
m1[i,2]<- length(which(db1[,10] == lvl1[i]))
}
View(m1)
m1<-m1[-1,]
write.table(m1, sep = ";", col.names = FALSE, row.names = FALSE, file = "clstrs.csv")
write.table(m1, sep = ";", col.names = FALSE, row.names = FALSE, file = "clstrs.csv", quote = FALSE)
db1 = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "", col.names = FALSE)
db1 = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "", header = FALSE)
m1 <- matrix(nrow = 29, ncol = 2)
lvl1 <- levels(db1[,10])
for(i in 1:29){
m1[i,1]<-lvl1[i]
m1[i,2]<- length(which(db1[,10] == lvl1[i]))
}
db = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "", header = = FALSE)
db = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "", header  = FALSE)
View(db)
db = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "", header= FALSE)
db = read.table("BD_MORTAIS_CLUSTERS.csv", sep = ";", quote = "", header= TRUE)
lvl <- levels(db$Cluster)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,5])
for(j in 1:length(agents)){
m <- matrix(nrow = length(agents), ncol = 2)
}
}
lvl <- levels(db$Cluster)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,5])
for(j in 1:length(agents)){
lvl <- levels(db$Cluster)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,5])
m <- matrix(nrow = length(agents), ncol = 2)
for(j in 1:length(agents)){
m[j,1]<-agents[j]
m[j,2]<-length(which(temp[,5]==agents[j]))
}
write.table(m, sep = ";", col.names = FALSE, row.names = FALSE, file = paste(lvl[i],"csv"), quote = FALSE)
}
}
}
lvl <- levels(db$Cluster)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,5])
m <- matrix(nrow = length(agents), ncol = 2)
for(j in 1:length(agents)){
m[j,1]<-agents[j]
m[j,2]<-length(which(temp[,5]==agents[j]))
}
write.table(m, sep = ";", col.names = FALSE, row.names = FALSE, file = paste(lvl[i],"csv"), quote = FALSE)
}
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,5])
m <- matrix(nrow = length(agents), ncol = 2)
m[j,1]<-agents[j]
View(m)
View(temp)
lvl <- levels(db$Cluster)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,6])
m <- matrix(nrow = length(agents), ncol = 2)
for(j in 1:length(agents)){
m[j,1]<-agents[j]
m[j,2]<-length(which(temp[,6]==agents[j]))
}
write.table(m, sep = ";", col.names = FALSE, row.names = FALSE, file = paste(lvl[i],"csv"), quote = FALSE)
}
View(temp)
View(m)
lvl <- levels(db$Cluster)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,6])
m <- matrix(nrow = length(agents), ncol = 2)
for(j in 1:length(agents)){
m[j,1]<-agents[j]
m[j,2]<-length(which(temp[,6]==agents[j]))
}
write.table(m, sep = ";", col.names = FALSE, row.names = FALSE, file = paste(lvl[i],".csv"), quote = FALSE)
}
lvl <- levels(db$Cluster)
m <- matrix(nrow = 10, ncol = 30)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,6])
for(j in 1:length(agents)){
m[j,2]<-length(which(temp[,6]==agents[j]))
}
}
View(m)
lvl <- levels(db$Cluster)
m <- matrix(nrow = 10, ncol = 30)
for(i in 1:29){
temp <- db[which(db[,10] == lvl[i]),]
agents <- levels(temp[,6])
for(j in 1:length(agents)){
m[j,i]<-length(which(temp[,6]==agents[j]))
}
}
View(m)
write.table(m, sep = ";", col.names = FALSE, row.names = FALSE, file = paste("TETTET", "teste", ".csv"), quote = FALSE)
ll
lvl
setwd("C:/Users/Ícaro/Dropbox/PIBIC_2-17/IC_2-17/Try_02")
evolution <- function(name, rang, iter, type_file, cl){
aux <- matrix(nrow = iter, ncol = length(rang))
est <- c(rep(0,each=iter))
desvpos <- c(rep(0,each=iter))
desvneg <- c(rep(0,each=iter))
desvmax <- c(rep(0,each=iter))
desvmin <- c(rep(0,each=iter))
for (i in 1:length(rang)){
a <- read.csv(paste(name, as.character(rang[i]), type_file, sep= ""), header = FALSE, quote = "")
for (j in 1:iter){
est[j] <- est[j] + as.numeric(a[j,cl]/length(rang))
aux[j,i] <- as.numeric(a[j,cl])
}
}
for (j in 1:iter){
desvpos[j] <- sqrt(var(aux[j,]))
desvneg[j] <- sqrt(var(aux[j,]))
desvmax[j] <- max(aux[j,])
desvmin[j] <- min(aux[j,])
}
return(list(custos = est, desvneg = est - desvneg, desvpos = desvpos + est, desvmax = desvmax, desvmin = desvmin))
}
balancing_plot <- function(name, rang, iter, type_file, cl){
aux <- matrix(nrow = iter, ncol = length(rang)*10)
est <- c(rep(0,each=iter))
desvpos <- c(rep(0,each=iter))
desvneg <- c(rep(0,each=iter))
desvmax <- c(rep(0,each=iter))
desvmin <- c(rep(0,each=iter))
for (i in 1:length(rang)){
for (k in 1:10){
count = 1
a <- read.csv(paste(name, as.character(rang[i]), "_", as.character(k), type_file, sep= ""), header = FALSE, quote = "")
for (j in 1:iter){
if(nrow(a)==j){
break
}
aux[j,k+(i-1)*10] <- as.numeric(a[j,cl])
}
}
}
for (j in 1:iter){
est[j] <- mean(as.numeric(aux[j,]), na.rm = TRUE)
desvpos[j] <- sqrt(var(aux[j,], na.rm = TRUE))
desvneg[j] <- sqrt(var(aux[j,], na.rm = TRUE))
desvmax[j] <- max(aux[j,], na.rm = TRUE)
desvmin[j] <- min(aux[j,], na.rm = TRUE)
}
return(list(custos = est, desvneg = est - desvneg, desvpos = desvpos + est, desvmax = desvmax, desvmin = desvmin))
}
remove(g,q,d)
dev.off()
png(filename = "Model_Training_TRY1.png", height = 520, width = 750)
par(mfrow = c(2,2))
# Plot Genetic Programming Model Training reward
temp <- c(1:31,33:48)
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,300), main = "Model Training\nGenetic Programming", xlab = "Generations", ylab = "Reward")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",2)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q-Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,400), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg)), col = "grey")
lines(1:400, q$custos, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,25), main = "Model Training\nDeep Learning", xlab = "Epochs", ylab = "Reward")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",2)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(0,200), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
plot.new()
legend("center", legend=c("Best model","Average Model", "Worst Model", "Standard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =1.5)
dev.off()
remove(g,q,d)
#####################################
#####################################
#####################################
dev.off()
png(filename = "Model_Time_TRY1.png", height = 520, width = 750)
par(mfrow = c(2,2))
# Plot Deep Learning Model Tranining time
plot(0,0,type = "l", ylim = c(2,5), xlim = c(1,25), main = "Model Time Training\nDeep Learning", xlab = "Epochs", ylab = "Time (s)")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",3)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(2,5), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Genetic Programming Model Training Time
temp <- c(1:31,33:48)
plot(0,0,type = "l", ylim = c(40,140), xlim = c(1,300), main = "Model Time Training\nGenetic Programming", xlab = "Generations", ylab = "Time (s)")
g <- evolution("GP/Log_Fitness/FIT_GP_20_", temp, 300, ".txt",3)
polygon(c(1:300,rev(1:300)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:300, g$custos, ylim = c(40,140), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:300, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:300, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q-Learning Model Tranining time
plot(0,0,type = "l", ylim = c(0,15), xlim = c(1,400), main = "Model Time Training\nQ-Learning", xlab = "Episodes", ylab = "Time (ms)")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 3)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg))*1000, col = "grey")
lines(1:400, q$custos*1000, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax*1000, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin*1000, col = "darkgreen", pch = 2, lty = 6)
plot.new()
legend("center", legend=c("Slowest Model","Average Model", "Fastest Model", "Standard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =1.5)
dev.off()
remove(g,q,d)
#####################################
#####################################
#####################################
dev.off()
png(filename = "Model_Osc_TRY1.png", height = 520, width = 750)
par(mfrow = c(2,2))
# DL Balancing
plot(0,0,type = "l", ylim = c(-.2,.2),xlim = c(1,200), main = "Model Angular Oscillation Range\nDeep Learning", xlab = "Epochs", ylab = "theta")
d<-balancing_plot("DL/DL_GAMES/Game_DL_8_",temp,200,".csv",4)
polygon(c(1:200,rev(1:200)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:200, d$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:200, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:200, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# GP Balancing
temp<-c(1,3,5,6,7,8,10,12,13,14,15,17,19,20,21,22,24,26,27,28,29,33,34,35,36,38,39,40,41,42,44,45,46,47)
plot(0,0,type = "l", ylim = c(-.2,.2),xlim = c(1,200), main = "Model Angular Oscillation Range\nGenetic Programming", xlab = "Generations", ylab = "theta")
g<-balancing_plot("GP/GP_GAMES/Game_GP_20_",temp,200,".csv",4)
polygon(c(1:200,rev(1:200)), c(g$desvpos, rev(g$desvneg)), col = "grey")
lines(1:200, g$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:200, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:200, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# QL Balancing
plot(0,0,type = "l", ylim = c(-.2,.2),xlim = c(1,200), main = "Model Angular Oscillation Range\nQ-Learning", xlab = "Episodes", ylab = "theta")
q<-balancing_plot("QL/QL_GAMES/Game_QL__",temp,200,".csv",4)
polygon(c(rev(1:200),1:200), c(rev(q$desvpos), q$desvneg), col = "grey")
lines(1:200, q$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:200, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:200, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
plot.new()
legend("center", legend=c("Maximum Amplitude","Average Amplitude", "Minimum Amplitude", "Standard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =1.5)
dev.off()
remove(g,q,d)
#####################################
#####################################
#####################################
dev.off()
png(filename = "Model_Pos_TRY1.png", height = 520, width = 750)
par(mfrow = c(2,2))
# DL Balancing
plot(0,0,type = "l", ylim = c(-1,1),xlim = c(1,200), main = "Model Position Oscillation Range\nDeep Learning", xlab = "Epochs", ylab = "x")
d<-balancing_plot("DL/DL_GAMES/Game_DL_8_",temp,200,".csv",2)
polygon(c(1:200,rev(1:200)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:200, d$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:200, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:200, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# GP Balancing
temp<-c(1,3,5,6,7,8,10,12,13,14,15,17,19,20,21,22,24,26,27,28,29,33,34,35,36,38,39,40,41,42,44,45,46,47)
plot(0,0,type = "l", ylim = c(-1,1),xlim = c(1,200), main = "Model Position Oscillation Range\nGenetic Programming", xlab = "Generations", ylab = "x")
g<-balancing_plot("GP/GP_GAMES/Game_GP_20_",temp,200,".csv",2)
polygon(c(rev(1:200),1:200), c(rev(g$desvpos), g$desvneg), col = "grey")
lines(1:200, g$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:200, g$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:200, g$desvmin, col = "darkgreen", pch = 2, lty = 6)
# QL Balancing
plot(0,0,type = "l", ylim = c(-1,1), xlim = c(1,200), main = "Model Position Oscillation Range\nQ-Learning", xlab = "Episodes", ylab = "x")
q<-balancing_plot("QL/QL_GAMES/Game_QL__",temp,200,".csv",2)
polygon(c(rev(1:200),1:200), c(rev(q$desvpos), q$desvneg), col = "grey")
lines(1:200, q$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:200, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:200, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
plot.new()
legend("center", legend=c("Maximum Amplitude","Average Amplitude", "Minimum Amplitude", "Standard Deviation"),col=c("blue", "red", "darkgreen", "black"), lty = c(6,1,6,1), lwd = c(2,3,2,2), cex =1.5)
dev.off()
remove(g,q,d)
# Plot Q-Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,400), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg)), col = "grey")
lines(1:400, q$custos, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,25), main = "Model Training\nDeep Learning", xlab = "Epochs", ylab = "Reward")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",2)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(0,200), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# DL Balancing
plot(0,0,type = "l", ylim = c(-.2,.2),xlim = c(1,200), main = "Model Angular Oscillation Range\nDeep Learning", xlab = "Epochs", ylab = "theta")
d<-balancing_plot("DL/DL_GAMES/Game_DL_8_",temp,200,".csv",4)
polygon(c(1:200,rev(1:200)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:200, d$custos, ylim = c(0,300), xlim = c(1,300), type = "l", col = "red", lwd = 3)
box()
lines(1:200, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:200, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Deep Learning Model Tranining time
plot(0,0,type = "l", ylim = c(2,5), xlim = c(1,25), main = "Model Time Training\nDeep Learning", xlab = "Epochs", ylab = "Time (s)")
d <- evolution("DL/Scores/SCR_DL_8_", 0:49, 25, ".csv",3)
polygon(c(1:25,rev(1:25)), c(d$desvpos, rev(d$desvneg)), col = "grey")
lines(1:25, d$custos, ylim = c(2,5), xlim = c(1,25), type = "l", col = "red", lwd = 3)
box()
lines(1:25, d$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:25, d$desvmin, col = "darkgreen", pch = 2, lty = 6)
# Plot Q-Learning Model Tranining reward
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,400), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:400,rev(1:400)), c(q$desvpos, rev(q$desvneg)), col = "grey")
lines(1:400, q$custos, ylim = c(0,200), xlim = c(1,400), type = "l", col = "red", lwd = 3)
box()
lines(1:400, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:400, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,1000), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 400, ".csv", 2)
polygon(c(1:1000,rev(1:1000)), c(q$desvpos, rev(q$desvneg)), col = "grey")
lines(1:1000, q$custos, ylim = c(0,200), xlim = c(1,1000), type = "l", col = "red", lwd = 3)
box()
lines(1:1000, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:1000, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
plot(0,0,type = "l", ylim = c(0,200), xlim = c(1,1000), main = "Model Training\nQ-Learning", xlab = "Episodes", ylab = "Reward")
q <- evolution("QL/Scores/SCR_QL__", 0:49, 1000, ".csv", 2)
polygon(c(1:1000,rev(1:1000)), c(q$desvpos, rev(q$desvneg)), col = "grey")
lines(1:1000, q$custos, ylim = c(0,200), xlim = c(1,1000), type = "l", col = "red", lwd = 3)
box()
lines(1:1000, q$desvmax, col = "blue", pch = 2, lty = 6)
lines(1:1000, q$desvmin, col = "darkgreen", pch = 2, lty = 6)
